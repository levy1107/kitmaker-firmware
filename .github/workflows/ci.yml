name: Build OTA Binary

on:
  push:
    paths:
      - "sketches/**"
      - ".github/workflows/ci.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Trae el repositorio
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      # 2. Instala Arduino-CLI
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      # 3. Instala el core ESP32
      - name: Install ESP32 core
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      # 4. Instala las librer√≠as usadas por el sketch
      - name: Install required libraries
        run: |
          arduino-cli lib update-index
          arduino-cli lib install "Adafruit SSD1306"
          arduino-cli lib install "Adafruit GFX Library"
          arduino-cli lib install "Adafruit HTU21DF Library"
          arduino-cli lib install "Adafruit NeoPixel"

      # 5. Prepara carpeta con nombre igual al .ino (requisito de Arduino-CLI)
      - name: Prepare sketch folder
        run: |
          mkdir -p build/automatic
          cp sketches/automatic.ino build/automatic/automatic.ino

      # 6. Compila y deja los artefactos dentro de build/automatic
      - name: Compile sketch
        run: |
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            build/automatic

      # 7. Copia el .bin generado a firmware/latest.bin y lo sube al repo
      - name: Publish latest.bin
        run: |
          # Busca el primer .bin que gener√≥ Arduino-CLI
          BIN=$(find build/automatic -type f -name "*.bin" | head -n1)
          echo "‚úÇÔ∏è  Binario encontrado: $BIN"
          mkdir -p firmware
          cp "$BIN" firmware/latest.bin
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
          git add firmware/latest.bin
          git commit -m "üî® Build latest.bin"
          git push
